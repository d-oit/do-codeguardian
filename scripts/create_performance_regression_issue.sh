#!/bin/bash
# Enhanced Performance Regression Issue Creation Script
# This script creates or updates GitHub issues for performance regressions with duplicate prevention

set -euo pipefail

# Source the github-issue-utils for duplicate detection
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/github-issue-utils.sh"

# Configuration
REPO="${GITHUB_REPOSITORY:-}"
REGRESSION_DETAILS="${1:-}"
RUN_ID="${GITHUB_RUN_ID:-}"
COMMIT_SHA="${GITHUB_SHA:-}"
REF="${GITHUB_REF:-}"
ISSUE_LABELS="performance,regression,urgent"

# Validation function
validate_inputs() {
    if [ -z "$REPO" ]; then
        echo "❌ Error: GITHUB_REPOSITORY environment variable is not set" >&2
        return 1
    fi
    
    if [ -z "$REGRESSION_DETAILS" ]; then
        echo "❌ Error: Regression details must be provided as first argument" >&2
        return 1
    fi
    
    if [ -z "$RUN_ID" ]; then
        echo "⚠️ Warning: GITHUB_RUN_ID not available, using timestamp" >&2
        RUN_ID="$(date +%Y%m%d-%H%M%S)"
    fi
    
    if [ -z "$COMMIT_SHA" ]; then
        echo "⚠️ Warning: GITHUB_SHA not available, attempting to get from git" >&2
        COMMIT_SHA=$(get_commit_hash)
    fi
}

# Generate enhanced issue title with unique identifier
generate_regression_title() {
    local commit_short="${COMMIT_SHA:0:8}"
    if [ -n "$commit_short" ]; then
        echo "🚨 Performance Regression Detected - Commit $commit_short"
    else
        echo "🚨 Performance Regression Detected - Run $RUN_ID"
    fi
}

# Create comprehensive issue body
create_issue_body() {
    local temp_body_file=$(mktemp)
    
    cat > "$temp_body_file" << EOF
## Performance Regression Alert

A performance regression has been detected in the CodeGuardian codebase.

### Regression Details
$(echo "$REGRESSION_DETAILS" | sed 's/^/- /')

### Environment Information
- **Run ID**: $RUN_ID
- **Branch**: \`$(echo "$REF" | sed 's|refs/heads/||')\`
- **Commit**: \`${COMMIT_SHA:0:8}\`
- **Full Commit**: \`$COMMIT_SHA\`
- **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
- **Workflow**: Performance Benchmark Suite
- **Trigger**: ${GITHUB_EVENT_NAME:-manual}

### Actions Required
1. **Review Benchmark Results**: Check the workflow artifacts for detailed performance data
2. **Root Cause Analysis**: Identify the specific changes causing the regression
3. **Performance Investigation**: 
   - Compare current performance metrics with baseline
   - Identify bottlenecks in affected components
   - Review recent code changes in performance-critical paths
4. **Implement Fixes**: Apply necessary performance optimizations
5. **Verification**: Re-run benchmarks to confirm regression is resolved

### Benchmark Artifacts
- Check the GitHub Actions artifacts from run #$RUN_ID
- Review individual benchmark suite results:
  - Regression Detection Suite
  - Load Testing Benchmarks
  - Performance Metrics Collection
  - Optimization Analysis Results

### Investigation Checklist
- [ ] Download and review benchmark artifacts
- [ ] Compare performance metrics with previous runs
- [ ] Identify specific benchmark failures or slowdowns
- [ ] Review git diff for performance-impacting changes
- [ ] Run local performance profiling if needed
- [ ] Document root cause in issue comments
- [ ] Implement and test performance fixes
- [ ] Verify fixes with follow-up benchmark runs

### Additional Context
- **Automated Detection**: This issue was automatically created by the performance monitoring system
- **Duplicate Prevention**: This issue has been checked for duplicates based on commit hash and content
- **Monitoring**: Performance trends are continuously monitored for early regression detection

### Related Links
- [Workflow Run](https://github.com/$REPO/actions/runs/$RUN_ID)
- [Commit Details](https://github.com/$REPO/commit/$COMMIT_SHA)
- [Performance Monitoring Documentation](docs/duplicate-issue-prevention.md)

---
*This issue was automatically generated by the CodeGuardian performance monitoring system.*
EOF

    echo "$temp_body_file"
}

# Main execution function
main() {
    echo "🚀 Starting enhanced performance regression issue creation..."
    echo "================================================================"
    
    # Validate inputs
    if ! validate_inputs; then
        exit 1
    fi
    
    # Log execution details
    echo "📋 Execution Details:"
    echo "  Repository: $REPO"
    echo "  Run ID: $RUN_ID"
    echo "  Commit: ${COMMIT_SHA:0:8}"
    echo "  Regression Details Length: $(echo "$REGRESSION_DETAILS" | wc -c) characters"
    
    # Generate issue title and body
    local issue_title
    issue_title=$(generate_regression_title)
    echo "📝 Issue Title: $issue_title"
    
    local body_file
    body_file=$(create_issue_body)
    
    echo "🔍 Checking for duplicate issues..."
    
    # Create or update issue with duplicate prevention
    local issue_number
    if issue_number=$(create_or_update_issue "$REPO" "$issue_title" "$body_file" "$ISSUE_LABELS" "${COMMIT_SHA:0:8}"); then
        if [ -n "$issue_number" ]; then
            echo "✅ Successfully processed issue #$issue_number"
            echo "🔗 Issue URL: https://github.com/$REPO/issues/$issue_number"
            
            # Set GitHub Actions output if available
            if [ -n "${GITHUB_OUTPUT:-}" ]; then
                echo "issue_number=$issue_number" >> "$GITHUB_OUTPUT"
                echo "issue_url=https://github.com/$REPO/issues/$issue_number" >> "$GITHUB_OUTPUT"
            fi
        else
            echo "⚠️ Issue processing completed but no issue number returned"
        fi
    else
        echo "❌ Failed to create or update issue" >&2
        cleanup_temp_files "$body_file"
        exit 1
    fi
    
    # Cleanup
    cleanup_temp_files "$body_file"
    
    echo "🎉 Performance regression issue processing completed successfully!"
}

# Cleanup function
cleanup_temp_files() {
    local body_file="$1"
    if [ -f "$body_file" ]; then
        rm -f "$body_file"
    fi
}

# Error handling
trap 'echo "❌ Script failed at line $LINENO" >&2; exit 1' ERR

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi