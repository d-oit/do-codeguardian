---
name: Verify Build for CodeQL

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Prevent concurrent runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Default permissions
permissions:
  contents: read

jobs:
  verify-build:
    name: Verify Build
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        rust_version: [stable]
        target: [x86_64-unknown-linux-gnu]
        include:
          - rust_version: stable
            target: x86_64-unknown-linux-gnu
            features: "default"
          - rust_version: stable
            target: x86_64-unknown-linux-gnu
            features: "full"
          - rust_version: stable
            target: x86_64-unknown-linux-gnu
            features: "dev"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 1

    - name: Setup Rust (${{ matrix.rust_version }})
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-${{ matrix.features }}-
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Clean stale artifacts
      run: |
        rm -rf target/${{ matrix.target }}/debug/.cargo-lock
        rm -rf target/${{ matrix.target }}/release/.cargo-lock

    - name: Verify build with ${{ matrix.features }} features
      timeout-minutes: 15
      run: |
        echo "Building with features: ${{ matrix.features }}"

        # Determine feature flags based on matrix
        case "${{ matrix.features }}" in
          "default")
            FEATURE_FLAG=""
            ;;
          "full")
            FEATURE_FLAG="--features full"
            ;;
          "dev")
            FEATURE_FLAG="--features dev"
            ;;
          *)
            FEATURE_FLAG="--all-features"
            ;;
        esac

        # Build release version
        echo "Building release version..."
        cargo build --release $FEATURE_FLAG --target ${{ matrix.target }} --quiet

        # Build debug version
        echo "Building debug version..."
        cargo build $FEATURE_FLAG --target ${{ matrix.target }} --quiet

        # Run check on all targets
        echo "Running cargo check..."
        cargo check $FEATURE_FLAG --all-targets --target ${{ matrix.target }} --quiet

        # Test compilation without running tests
        echo "Testing compilation..."
        cargo test $FEATURE_FLAG --no-run --target ${{ matrix.target }} --quiet

        echo "✅ Build verification completed successfully for ${{ matrix.features }} features"

    - name: Verify CodeQL configuration
      run: |
        echo "Verifying CodeQL configuration..."

        # Check if CodeQL config exists
        if [ ! -f ".github/codeql-config.yml" ]; then
          echo "❌ CodeQL configuration file missing"
          exit 1
        fi

        # Validate CodeQL config syntax
        if command -v yq >/dev/null 2>&1; then
          if ! yq eval '.github/codeql-config.yml' >/dev/null 2>&1; then
            echo "❌ CodeQL configuration has invalid YAML syntax"
            exit 1
          fi
        fi

        # Check for required CodeQL config sections
        if ! grep -q "paths:" .github/codeql-config.yml; then
          echo "⚠️  Warning: CodeQL config missing paths section"
        fi

        if ! grep -q "rust:" .github/codeql-config.yml; then
          echo "⚠️  Warning: CodeQL config missing rust section"
        fi

        echo "✅ CodeQL configuration verified"

    - name: Verify build artifacts
      run: |
        echo "Verifying build artifacts..."

        # Check if binary was created
        if [ ! -f "target/${{ matrix.target }}/release/do-codeguardian" ]; then
          echo "❌ Release binary not found"
          exit 1
        fi

        # Check binary size (should be reasonable)
        BINARY_SIZE=$(stat -c%s "target/${{ matrix.target }}/release/do-codeguardian" 2>/dev/null || stat -f%z "target/${{ matrix.target }}/release/do-codeguardian" 2>/dev/null)
        if [ "$BINARY_SIZE" -lt 1000000 ]; then  # Less than 1MB is suspicious
          echo "⚠️  Warning: Binary size seems too small (${BINARY_SIZE} bytes)"
        fi

        # Check if binary is executable
        if [ ! -x "target/${{ matrix.target }}/release/do-codeguardian" ]; then
          echo "❌ Release binary is not executable"
          exit 1
        fi

        echo "✅ Build artifacts verified"

    - name: Test feature compatibility
      if: matrix.features == 'full'
      run: |
        echo "Testing feature compatibility..."

        # Test individual features for conflicts
        FEATURES=("git" "security" "logging" "hashing" "ml" "ast")

        for feature in "${FEATURES[@]}"; do
          echo "Testing feature: $feature"
          if ! cargo check --features "$feature" --target ${{ matrix.target }} --quiet 2>/dev/null; then
            echo "⚠️  Warning: Feature '$feature' has compilation issues"
          else
            echo "✅ Feature '$feature' compiles successfully"
          fi
        done

        # Test feature combinations
        echo "Testing feature combinations..."
        if ! cargo check --features "git,security,logging" --target ${{ matrix.target }} --quiet 2>/dev/null; then
          echo "⚠️  Warning: Core features combination has issues"
        else
          echo "✅ Core features combination compiles successfully"
        fi

  verify-cross-platform:
    name: Verify Cross-Platform Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 1

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cross-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cross-${{ matrix.target }}-
          ${{ runner.os }}-cross-

    - name: Install cross-compilation tools
      if: matrix.target != 'x86_64-unknown-linux-gnu'
      run: |
        if [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
          echo "Installing macOS cross-compilation tools..."
          # macOS tools are usually available
        elif [ "${{ matrix.target }}" = "x86_64-pc-windows-msvc" ]; then
          echo "Installing Windows cross-compilation tools..."
          rustup target add ${{ matrix.target }}
        fi

    - name: Verify cross-platform build
      timeout-minutes: 10
      run: |
        echo "Building for target: ${{ matrix.target }}"

        # Build with default features for cross-platform compatibility
        cargo build --release --target ${{ matrix.target }} --quiet

        # Verify the binary was created
        if [ ! -f "target/${{ matrix.target }}/release/do-codeguardian${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }}" ]; then
          echo "❌ Cross-platform binary not found for ${{ matrix.target }}"
          exit 1
        fi

        echo "✅ Cross-platform build successful for ${{ matrix.target }}"

  verify-codeql-integration:
    name: Verify CodeQL Integration
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 1

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-codeql-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-codeql-

    - name: Build for CodeQL analysis
      run: |
        echo "Building for CodeQL analysis..."

        # Build with the same commands as CodeQL config
        cargo build --release --quiet
        cargo build --all-targets --quiet

        echo "✅ CodeQL build commands executed successfully"

    - name: Validate CodeQL paths
      run: |
        echo "Validating CodeQL path exclusions..."

        # Check if excluded paths actually exist
        while IFS= read -r pattern; do
          if [[ "$pattern" =~ ^paths-ignore: ]]; then
            continue
          fi
          if [[ "$pattern" =~ ^[[:space:]]*-[[:space:]]*(.+) ]]; then
            path="${BASH_REMATCH[1]}"
            if [[ "$path" == "target/" ]] && [ -d "target" ]; then
              echo "✅ Excluded path exists: $path"
            elif [[ "$path" == "benches/" ]] && [ -d "benches" ]; then
              echo "✅ Excluded path exists: $path"
            elif [[ "$path" == "**/*.md" ]]; then
              if find . -name "*.md" | head -5 | grep -q "."; then
                echo "✅ Markdown files found and excluded: $path"
              fi
            fi
          fi
        done < .github/codeql-config.yml

        echo "✅ CodeQL path validation completed"

    - name: Test CodeQL build mode
      run: |
        echo "Testing CodeQL build mode configuration..."

        # Extract build commands from CodeQL config
        BUILD_COMMANDS=$(grep -A 10 "build-commands:" .github/codeql-config.yml | grep -E "^[[:space:]]*-[[:space:]]*cargo" | sed 's/^[[:space:]]*-[[:space:]]*//')

        if [ -z "$BUILD_COMMANDS" ]; then
          echo "⚠️  Warning: No build commands found in CodeQL config"
        else
          echo "Found CodeQL build commands:"
          echo "$BUILD_COMMANDS"

          # Test each build command
          echo "$BUILD_COMMANDS" | while read -r cmd; do
            if [ -n "$cmd" ]; then
              echo "Testing: $cmd"
              if eval "$cmd --quiet"; then
                echo "✅ CodeQL build command successful: $cmd"
              else
                echo "❌ CodeQL build command failed: $cmd"
                exit 1
              fi
            fi
          done
        fi

        echo "✅ CodeQL build mode validation completed"
