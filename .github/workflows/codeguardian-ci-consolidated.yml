---
name: CodeGuardian CI (Consolidated)

on:
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '*.md'
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '*.md'
  schedule:
    - cron: '0 2 * * 1'  # Weekly full scan
  workflow_dispatch:
    inputs:
      skip_analysis:
        description: 'Skip CodeGuardian analysis'
        required: false
        type: boolean
        default: false
      rust_version:
        description: 'Rust version to test'
        required: false
        type: choice
        options:
          - stable
          - beta
          - nightly
        default: stable

# Prevent concurrent runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Default permissions for all jobs
permissions:
  contents: read
  issues: read
  pull-requests: read
  security-events: write
  id-token: write  # For binary signing

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: "true"

jobs:
  # Fast quality checks job
  quality-check:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}

    steps:
    - uses: actions/checkout@v5

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ github.event.inputs.rust_version || 'stable' }}
        components: clippy, rustfmt

    - name: Install sccache
      uses: mozilla/sccache-action@v0.0.6

    - name: Generate cache keys
    - name: Run Performance Benchmarks
      id: performance_benchmarks
      run: |
        echo "📊 Running performance analysis..."
        if ./scripts/performance_analysis.sh; then
          echo "✅ Performance analysis completed successfully"
          echo "performance_status=passed" >> $GITHUB_OUTPUT
        else
          echo "⚠️  Performance analysis failed, but continuing (non-critical)"
          echo "performance_status=failed" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Run Production Performance Monitoring
      id: performance_monitoring
      run: |
        echo "📊 Running production performance monitoring..."
        if ./scripts/performance_monitoring.sh; then
          echo "✅ Performance monitoring completed successfully"
          echo "monitoring_status=passed" >> $GITHUB_OUTPUT
        else
          echo "⚠️  Performance monitoring failed, but continuing (non-critical)"
          echo "monitoring_status=failed" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
        workspaces: "./ -> target"
        cache-all-crates: true
        cache-workspace-crates: true
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Clippy
      run: |
        echo "🔍 Running clippy..."
        if cargo clippy --profile dev-fast --features dev -- -D warnings; then
          echo "✅ Clippy check passed"
        else
          echo "❌ Clippy check failed"
          exit 1
        fi

    - name: Format Check
      run: |
        echo "🔍 Running format check..."
        if cargo fmt --check; then
          echo "✅ Format check passed"
        else
          echo "❌ Format check failed - run 'cargo fmt' to fix"
          exit 1
        fi

    - name: Build Check
      run: |
        echo "🔨 Running build check..."
        if cargo check --profile dev-fast --features dev; then
          echo "✅ Build check passed"
        else
          echo "❌ Build check failed"
          exit 1
        fi

  # Cross-platform test job
  test:
    name: 🧪 Tests (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: quality-check
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            rust: nightly
          - os: windows-latest
            rust: stable
          - os: macos-latest
            rust: stable
          - os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu

    steps:
    - uses: actions/checkout@v5

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Install sccache
      uses: mozilla/sccache-action@v0.0.6

    - name: Install cross-compilation tools (ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Generate cache keys
      id: cache-keys
      run: |
        echo "cargo-lock-hash=$(sha256sum Cargo.lock | cut -d' ' -f1)" >> $GITHUB_OUTPUT

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.8.0
      with:
        key: ${{ runner.os }}-cargo-${{ steps.cache-keys.outputs.cargo-lock-hash }}-${{ matrix.rust }}-${{ matrix.target || 'default' }}-test
        workspaces: "./ -> target"
        cache-all-crates: true
        cache-workspace-crates: true
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Run Tests
      id: run_tests
      run: |
        echo "🧪 Running test suite..."
        if cargo test --profile dev-fast --features dev -- --format=json | tee test-results.json; then
          echo "✅ All tests passed"
          echo "test_status=passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Some tests failed"
          echo "test_status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Generate Test Summary
      if: always()
      run: |
        echo "## Test Results Summary (${{ matrix.os }}, ${{ matrix.rust }})" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.run_tests.outcome }}" == "success" ]; then
          echo "✅ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.rust }}-${{ github.run_id }}
        path: test-results.json
        retention-days: 30

  # Security scanning job
  security:
    name: 🔒 Security & Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-check

    steps:
    - uses: actions/checkout@v5

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install sccache
      uses: mozilla/sccache-action@v0.0.6

    - name: Generate cache keys
      id: cache-keys
      run: |
        echo "cargo-lock-hash=$(sha256sum Cargo.lock | cut -d' ' -f1)" >> $GITHUB_OUTPUT

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.8.0
      with:
        key: ${{ runner.os }}-cargo-${{ steps.cache-keys.outputs.cargo-lock-hash }}-stable-security
        workspaces: "./ -> target"
        cache-all-crates: true
        cache-workspace-crates: true
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Security Audit
      id: security_audit
      run: |
        echo "🔒 Running cargo audit..."
        cargo install cargo-audit --locked

        if cargo audit --format json > audit-results.json; then
          echo "✅ Security audit passed - no vulnerabilities found"
          echo "audit_status=passed" >> $GITHUB_OUTPUT
        else
          echo "⚠️  Security audit found issues (review audit-results.json)"
          echo "audit_status=issues_found" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: GitLeaks Secret Detection
      id: gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Trivy Container Security Scan
      id: trivy
      run: |
        echo "🔍 Running Trivy container security scan..."
        # Build a temporary container for scanning
        docker build -t codeguardian-scan -f Dockerfile.ci .

        # Run Trivy scan
        docker run --rm -v /tmp/trivy-cache:/root/.cache/trivy \
          aquasecurity/trivy:latest image \
          --format json \
          --output /tmp/trivy-results.json \
          codeguardian-scan || true

        if [ -f /tmp/trivy-results.json ]; then
          cp /tmp/trivy-results.json trivy-results.json
          echo "trivy_status=completed" >> $GITHUB_OUTPUT
        else
          echo "trivy_status=failed" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Generate SBOM
      id: sbom
      run: |
        echo "📦 Generating SBOM with CycloneDX..."
        cargo install cargo-cyclonedx --locked

        if cargo cyclonedx --format json > sbom.json; then
          echo "✅ SBOM generated successfully"
          echo "sbom_status=passed" >> $GITHUB_OUTPUT
        else
          echo "⚠️  SBOM generation failed"
          echo "sbom_status=failed" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Security Summary
      if: always()
      run: |
        echo "## Security & Compliance Summary" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.security_audit.outcome }}" == "success" ]; then
          echo "✅ **Cargo Audit**: No issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️  **Cargo Audit**: Issues detected" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.gitleaks.outcome }}" == "success" ]; then
          echo "✅ **GitLeaks**: No secrets found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️  **GitLeaks**: Potential secrets detected" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.trivy.outcome }}" == "success" ]; then
          echo "✅ **Trivy Scan**: Completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️  **Trivy Scan**: Issues found or failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.sbom.outcome }}" == "success" ]; then
          echo "✅ **SBOM**: Generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️  **SBOM**: Generation failed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Security Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-results-${{ github.run_id }}
        path: |
          audit-results.json
          trivy-results.json
          sbom.json
          .gitleaks-report.json
        retention-days: 30

  # CodeGuardian analysis job
  codeguardian:
    name: 🛡️ CodeGuardian Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test, security]
    if: github.event.inputs.skip_analysis != 'true'

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install sccache
      uses: mozilla/sccache-action@v0.0.6

    - name: Generate cache keys
      id: cache-keys
      run: |
        echo "cargo-lock-hash=$(sha256sum Cargo.lock | cut -d' ' -f1)" >> $GITHUB_OUTPUT

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.8.0
      with:
        key: ${{ runner.os }}-cargo-${{ steps.cache-keys.outputs.cargo-lock-hash }}-stable-analysis
        workspaces: "./ -> target"
        cache-all-crates: true
        cache-workspace-crates: true
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Build CodeGuardian
      run: |
          echo "🔨 Building CodeGuardian..."
          cargo build --release --quiet

    - name: Run CodeGuardian Analysis
      run: |
        mkdir -p build/analysis-results

        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "🔍 Running PR diff analysis..."
          ./target/release/do-codeguardian check . \
            --diff origin/main..HEAD \
            --format json \
            --out build/analysis-results/results.json \
            --emit-md build/analysis-results/report.md
        else
          echo "🔍 Running full analysis..."
          ./target/release/do-codeguardian check . \
            --format json \
            --out build/analysis-results/results.json \
            --emit-md build/analysis-results/report.md
        fi

        echo "✅ CodeGuardian analysis completed"

    - name: Prevent duplicate GitHub issues
      if: github.event_name == 'pull_request'
      run: |
        source ./scripts/github-issue-utils.sh

        ISSUE_TITLE="CodeGuardian PR Analysis - PR #${{ github.event.number }}"
        COMMIT_HASH=$(git rev-parse --short HEAD)

        EXISTING_ISSUE=$(detect_duplicate_issue \
          "${{ github.repository }}" \
          "$ISSUE_TITLE" \
          "$(cat build/analysis-results/results.json)" \
          "$COMMIT_HASH")

        if [ -n "$EXISTING_ISSUE" ]; then
          echo "::notice::Duplicate prevented - issue already exists: #$EXISTING_ISSUE"
          echo "DUPLICATE_PREVENTED=true" >> $GITHUB_ENV
        else
          echo "::notice::No duplicates found - safe to create new issue"
          echo "DUPLICATE_PREVENTED=false" >> $GITHUB_ENV
        fi

    - name: Create GitHub issue for findings
      if: github.event_name == 'pull_request' && env.DUPLICATE_PREVENTED == 'false'
      run: |
        ./target/release/do-codeguardian gh-issue \
          --from build/analysis-results/results.json \
          --repo "${{ github.repository }}" \
          --title "CodeGuardian PR Analysis - PR #${{ github.event.number }}" \
          --labels "codeguardian,automated,pr-${{ github.event.number }},duplicate-prevention-enabled" \
          --mode checklist \
          --summary-max-issues 15 \
          --duplicate-check \
          --ml-enhanced
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Analysis Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: codeguardian-results-${{ github.run_id }}
        path: |
          build/analysis-results/results.json
          build/analysis-results/report.md
        retention-days: 30

  # Build and release job
  build:
    name: 🔨 Build Release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu

    steps:
    - uses: actions/checkout@v5

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Install sccache
      uses: mozilla/sccache-action@v0.0.6

    - name: Install cross-compilation tools (ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Generate cache keys
      id: cache-keys
      run: |
        echo "cargo-lock-hash=$(sha256sum Cargo.lock | cut -d' ' -f1)" >> $GITHUB_OUTPUT

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.8.0
      with:
        key: ${{ runner.os }}-cargo-${{ steps.cache-keys.outputs.cargo-lock-hash }}-stable-build-${{ matrix.target }}
        workspaces: "./ -> target"
        cache-all-crates: true
        cache-workspace-crates: true
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Build Release
      run: |
        echo "🔨 Building release binary for ${{ matrix.target }}..."
        if [ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          cargo build --release --target ${{ matrix.target }} --features full
        else
          cargo build --release --target ${{ matrix.target }} --features full
        fi

        if [ $? -eq 0 ]; then
          echo "✅ Release build successful for ${{ matrix.target }}"
        else
          echo "❌ Release build failed for ${{ matrix.target }}"
          exit 1
        fi

    - name: Binary Signing (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
      uses: sigstore/cosign-installer@v3.5.0
      with:
        cosign-release: 'v2.2.4'

    - name: Sign Binary
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        echo "🔐 Signing binary..."
        cosign sign-blob --key env://COSIGN_PRIVATE_KEY target/${{ matrix.target }}/release/do-codeguardian > target/${{ matrix.target }}/release/do-codeguardian.sig
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: codeguardian-${{ matrix.target }}-${{ github.run_id }}
        path: |
          target/${{ matrix.target }}/release/do-codeguardian
          target/${{ matrix.target }}/release/do-codeguardian.sig
        retention-days: 30

  # Performance monitoring job
  performance:
    name: 📊 Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test, security]
    if: github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v5

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install sccache
      uses: mozilla/sccache-action@v0.0.6

    - name: Generate cache keys
      id: cache-keys
      run: |
        echo "cargo-lock-hash=$(sha256sum Cargo.lock | cut -d' ' -f1)" >> $GITHUB_OUTPUT

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.8.0
      with:
        key: ${{ runner.os }}-cargo-${{ steps.cache-keys.outputs.cargo-lock-hash }}-stable-performance
        workspaces: "./ -> target"
        cache-all-crates: true
        cache-workspace-crates: true
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Run Performance Benchmarks
      id: performance_benchmarks
      run: |
        echo "📊 Running performance analysis..."
        if ./scripts/performance_analysis.sh; then
          echo "✅ Performance analysis completed successfully"
          echo "performance_status=passed" >> $GITHUB_OUTPUT
        else
          echo "⚠️  Performance analysis failed, but continuing (non-critical)"
          echo "performance_status=failed" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Performance Summary
      if: always()
      run: |
        echo "## Performance Analysis Summary" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.performance_benchmarks.outcome }}" == "success" ]; then
          echo "✅ **Performance Analysis**: Completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️  **Performance Analysis**: Failed or incomplete" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.performance_monitoring.outcome }}" == "success" ]; then
          echo "✅ **Performance Monitoring**: Completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️  **Performance Monitoring**: Failed or incomplete" >> $GITHUB_STEP_SUMMARY
        fi
      uses: actions/upload-artifact@v4
      with:
        name: performance-results-${{ github.run_id }}
        path: |
          target/criterion/**/*
          *.log
        retention-days: 7
