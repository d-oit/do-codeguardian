---
name: Code Coverage

on:
   push:
     branches: [ main ]
   pull_request:
     branches: [ main, develop ]
     paths:
       - 'src/**'
       - 'tests/**'
       - 'Cargo.toml'
       - 'Cargo.lock'
   schedule:
     - cron: '0 3 * * 1'  # Weekly on Mondays
   workflow_dispatch:

env:
   CARGO_TERM_COLOR: always
   RUST_BACKTRACE: 1
   RUSTC_WRAPPER: sccache

jobs:
   coverage:
     name: 📊 Code Coverage
     runs-on: ubuntu-latest
     timeout-minutes: 20
     permissions:
       contents: read
     concurrency:
       group: ${{ github.workflow }}-${{ github.ref }}
       cancel-in-progress: true

     steps:
     - name: Checkout code
       uses: actions/checkout@v5

     - name: Setup Rust
       uses: actions-rust-lang/setup-rust-toolchain@v1
       with:
         toolchain: stable
         components: llvm-tools-preview

     - name: Install sccache
       uses: mozilla/sccache-action@v0.0.6

     - name: Generate cache keys
       id: cache-keys
       run: |
         echo "cargo-lock-hash=$(sha256sum Cargo.lock | cut -d' ' -f1)" >> $GITHUB_OUTPUT

     - name: 🗄️ Rust Cache
       uses: Swatinem/rust-cache@v2.8.0
       with:
         key: ${{ runner.os }}-cargo-${{ steps.cache-keys.outputs.cargo-lock-hash }}-stable-coverage
         workspaces: "./ -> target"
         cache-all-crates: true
         cache-workspace-crates: true
         save-if: ${{ github.ref == 'refs/heads/main' }}

     - name: Install cargo-tarpaulin
       run: cargo install cargo-tarpaulin

     - name: Generate coverage report
       id: coverage
       run: |
         echo "📊 Generating coverage report..."
         cargo tarpaulin \
           --verbose \
           --all-features \
           --workspace \
           --timeout 120 \
           --out xml \
           --output-dir coverage/ \
           --exclude-files 'target/*' 'tests/fixtures/*' 'benches/*' 'examples/*' 'tmp_*' \
           --fail-under 75

         # Extract coverage percentage for summary
         if [ -f coverage/cobertura.xml ]; then
           COVERAGE=$(grep -oP '(?<=line-rate=")[^"]*' coverage/cobertura.xml | head -1)
           COVERAGE_PERCENT=$(echo "scale=2; $COVERAGE * 100" | bc 2>/dev/null || echo "75.00")
           echo "coverage_percent=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT
           echo "✅ Coverage report generated: ${COVERAGE_PERCENT}%"
         else
           echo "coverage_percent=0.00" >> $GITHUB_OUTPUT
           echo "❌ Coverage report generation failed"
           exit 1
         fi

     - name: Upload coverage to Codecov
       uses: codecov/codecov-action@v5
       with:
         file: coverage/cobertura.xml
         flags: unittests
         name: codecov-umbrella
         fail_ci_if_error: false

     - name: Archive coverage results
       uses: actions/upload-artifact@v4
       with:
         name: code-coverage-report-${{ github.run_id }}
         path: coverage/
         retention-days: 30

     - name: Coverage Summary
       run: |
         echo "## 📊 Code Coverage Report" >> $GITHUB_STEP_SUMMARY
         echo "**Coverage**: ${{ steps.coverage.outputs.coverage_percent }}%" >> $GITHUB_STEP_SUMMARY
         echo "**Threshold**: 75% minimum" >> $GITHUB_STEP_SUMMARY

         if (( $(echo "${{ steps.coverage.outputs.coverage_percent }} >= 75" | bc -l 2>/dev/null || echo 0) )); then
           echo "✅ **Status**: Quality gate passed" >> $GITHUB_STEP_SUMMARY
         else
           echo "❌ **Status**: Below minimum threshold" >> $GITHUB_STEP_SUMMARY
         fi

         echo "" >> $GITHUB_STEP_SUMMARY
         echo "Coverage report has been generated and uploaded to Codecov." >> $GITHUB_STEP_SUMMARY
         echo "Check artifacts for detailed HTML report." >> $GITHUB_STEP_SUMMARY
