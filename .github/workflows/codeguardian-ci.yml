name: CodeGuardian CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Weekly full scan

jobs:
  codeguardian-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
        contents: read
        issues: write
        pull-requests: write

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Need full history for diff

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Build CodeGuardian
      run: |
          cargo build --release --quiet

    - name: Run CodeGuardian (PR diff-only)
      run: |
        # Diff-only mode for PRs - fast and focused feedback
        ./target/release/do-codeguardian check . \
          --diff origin/main..HEAD \
          --format json \
          --out results.json \
          --emit-md report.md \
          --emit-gh \
          --repo ${{ github.repository }} \
          --gh-mode checklist \
          --labels "codeguardian,automated,pr-${{ github.event.number }}"

        # Log whether issues were created or skipped
        echo "CodeGuardian analysis completed. Check logs above for issue creation status."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: codeguardian-pr-results
        path: |
          results.json
          report.md

  codeguardian-full:
    if: github.event_name == 'push' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
        contents: read
        issues: write

    steps:
    - uses: actions/checkout@v5

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Build CodeGuardian
      run: |
          cargo build --release --quiet

    - name: Run CodeGuardian (Full scan)
      run: |
        # Full repository scan for scheduled jobs and main branch pushes
        ./target/release/do-codeguardian check . \
          --format json \
          --out results.json \
          --emit-md report.md \
          --emit-gh \
          --repo ${{ github.repository }} \
          --gh-mode checklist \
          --labels "codeguardian,automated,full-scan" \
          --fail-on-issues

        # Log whether issues were created or skipped
        echo "CodeGuardian analysis completed. Check logs above for issue creation status."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: codeguardian-full-results
        path: |
          results.json
          report.md

  codeguardian-baseline:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
        contents: write

    steps:
    - uses: actions/checkout@v5

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Build CodeGuardian
      run: |
          cargo build --release --quiet

    - name: Update baseline
      run: |
        set -e  # Exit on any error

        # Run CodeGuardian to generate baseline
        ./target/release/do-codeguardian check . \
          --format json \
          --out baseline.json

        # Check if baseline.json exists and has changes
        if git ls-files --error-unmatch baseline.json >/dev/null 2>&1; then
          # File is tracked, check for changes
          if ! git diff --quiet baseline.json; then
           echo "Baseline has changes, committing..."
           git config user.name "github-actions[bot]"
           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
           git add baseline.json
           git commit -m "chore: update CodeGuardian baseline [skip ci]"
           # Retry push up to 3 times in case of conflicts
           for i in {1..3}; do
             if git push; then
               echo "Baseline updated successfully"
               break
             else
               echo "Push failed (attempt $i), retrying..."
               git pull --rebase
             fi
           done
          else
           echo "No changes to baseline"
          fi
        else
          # File not tracked, add it
          echo "Adding new baseline file"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add baseline.json
          git commit -m "chore: add initial CodeGuardian baseline [skip ci]"
          git push
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
