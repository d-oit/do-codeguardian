name: Deployment Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      test_type:
        description: 'Type of deployment test'
        required: true
        default: 'full'
        type: choice
        options:
        - smoke
        - integration
        - full
        - chaos

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build for Deployment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build release binary
      run: cargo build --release --locked

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: codeguardian-binary
        path: target/release/codeguardian
        retention-days: 7

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.test_type == 'smoke' || github.event.inputs.test_type == 'full' || github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: codeguardian-binary
        path: ./bin/

    - name: Make binary executable
      run: chmod +x ./bin/codeguardian

    - name: Run basic smoke tests
      run: |
        # Test version command
        ./bin/codeguardian --version

        # Test help command
        ./bin/codeguardian --help

        # Test basic file analysis
        echo 'fn main() { println!("test"); }' > test.rs
        ./bin/codeguardian check test.rs

    - name: Verify smoke test results
      run: |
        if [ $? -eq 0 ]; then
          echo "✅ Smoke tests passed"
        else
          echo "❌ Smoke tests failed"
          exit 1
        fi

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'full' || github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: codeguardian-binary
        path: ./bin/

    - name: Make binary executable
      run: chmod +x ./bin/codeguardian

    - name: Run integration tests
      run: cargo test --test integration_tests --release

    - name: Run chaos engineering tests
      run: cargo test --test chaos_engineering_tests --release

    - name: Run performance benchmarks
      run: cargo bench --bench chaos_engineering_benchmark -- --measurement-time 10

  chaos-deployment-test:
    name: Chaos Deployment Tests
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.event.inputs.test_type == 'chaos' || github.event.inputs.test_type == 'full'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: codeguardian-binary
        path: ./bin/

    - name: Make binary executable
      run: chmod +x ./bin/codeguardian

    - name: Setup chaos testing environment
      run: |
        # Install stress testing tools
        sudo apt-get update
        sudo apt-get install -y stress-ng

        # Create test files
        mkdir -p chaos-test-files
        for i in {1..20}; do
          cat > chaos-test-files/test_$i.rs << EOF
        fn main() {
            let password = "hardcoded_password_$i";
            println!("Password: {}", password);
        }
        EOF
        done

    - name: Run chaos deployment tests
      run: |
        # Test under CPU stress
        echo "Testing under CPU stress..."
        stress-ng --cpu 2 --timeout 30s &
        STRESS_PID=$!

        timeout 25s ./bin/codeguardian check chaos-test-files/ || true

        kill $STRESS_PID 2>/dev/null || true
        wait $STRESS_PID 2>/dev/null || true

        # Test under memory stress
        echo "Testing under memory stress..."
        stress-ng --vm 2 --vm-bytes 256M --timeout 30s &
        STRESS_PID=$!

        timeout 25s ./bin/codeguardian check chaos-test-files/ || true

        kill $STRESS_PID 2>/dev/null || true
        wait $STRESS_PID 2>/dev/null || true

        # Test under I/O stress
        echo "Testing under I/O stress..."
        stress-ng --io 2 --timeout 30s &
        STRESS_PID=$!

        timeout 25s ./bin/codeguardian check chaos-test-files/ || true

        kill $STRESS_PID 2>/dev/null || true
        wait $STRESS_PID 2>/dev/null || true

        echo "✅ Chaos deployment tests completed"

  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.test_type == 'full' || github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: codeguardian-binary
        path: ./bin/

    - name: Make binary executable
      run: chmod +x ./bin/codeguardian

    - name: Run performance benchmarks
      run: |
        # Run comprehensive benchmarks
        cargo bench --bench performance_benchmark -- --measurement-time 30

        # Run chaos benchmarks
        cargo bench --bench chaos_engineering_benchmark -- --measurement-time 20

    - name: Validate performance thresholds
      run: |
        # Check if benchmarks completed successfully
        if [ $? -eq 0 ]; then
          echo "✅ Performance validation passed"
        else
          echo "❌ Performance validation failed"
          exit 1
        fi

  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [smoke-test, integration-test, chaos-deployment-test, performance-validation]
    if: always()
    steps:
    - name: Validate deployment readiness
      run: |
        # Check if all dependent jobs succeeded
        if [[ "${{ needs.smoke-test.result }}" == "success" && \
              "${{ needs.integration-test.result }}" == "success" && \
              "${{ needs.chaos-deployment-test.result }}" == "success" && \
              "${{ needs.performance-validation.result }}" == "success" ]]; then
          echo "✅ Deployment validation passed - all tests successful"
          echo "deployment_ready=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Deployment validation failed - some tests failed"
          echo "deployment_ready=false" >> $GITHUB_OUTPUT
          exit 1
        fi
      id: validation

    - name: Generate deployment report
      if: always()
      run: |
        echo "# Deployment Testing Report" > deployment_report.md
        echo "" >> deployment_report.md
        echo "## Test Results" >> deployment_report.md
        echo "- Smoke Tests: ${{ needs.smoke-test.result }}" >> deployment_report.md
        echo "- Integration Tests: ${{ needs.integration-test.result }}" >> deployment_report.md
        echo "- Chaos Tests: ${{ needs.chaos-deployment-test.result }}" >> deployment_report.md
        echo "- Performance Tests: ${{ needs.performance-validation.result }}" >> deployment_report.md
        echo "" >> deployment_report.md
        echo "## Deployment Status" >> deployment_report.md
        echo "Ready for deployment: ${{ steps.validation.outputs.deployment_ready }}" >> deployment_report.md

    - name: Upload deployment report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment_report.md

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deployment-validation
    if: github.event.inputs.environment == 'staging' && needs.deployment-validation.result == 'success'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: codeguardian-binary

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add actual deployment commands here
        echo "✅ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deployment-validation
    if: github.event.inputs.environment == 'production' && needs.deployment-validation.result == 'success'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: codeguardian-binary

    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # Add actual deployment commands here
        echo "✅ Production deployment completed"
