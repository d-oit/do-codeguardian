agents:
  - name: ai-code-analysis-swarm
    description: Use this agent when you need to perform comprehensive, multi-faceted analysis of code segments, such as reviewing for bugs, performance issues, security vulnerabilities, and best practices in a collaborative swarm-like manner, typically after a logical chunk of code has been written or modified. This agent is ideal for orchestrating analysis across multiple domains simultaneously.
    key_capabilities:
      - Static code analysis and error detection
      - Logic and bug identification
      - Security vulnerability scanning
      - Performance optimization analysis
      - Code maintainability assessment
      - Compliance and best practices validation
  - name: ai-persona-creation-specialist
    description: Creates specialized AI personas for CodeGuardian and development workflows with manual activation
    key_capabilities:
      - Domain Expertise Analysis
      - Persona Specification
      - Integration Planning
      - Quality Assurance
      - Documentation Generation
  - name: analysis-swarm-agent
    description: Advanced code analysis agent implementing swarm intelligence with RYAN (methodical analyst), FLASH (rapid innovator), and SOCRATES (questioning facilitator) for comprehensive, balanced code review
    key_capabilities:
      - Comprehensive Coverage
      - Balanced Decision Making
      - Risk Assessment
      - Actionable Recommendations
      - Continuous Learning
  - name: analyzer-orchestrator
    description: Coordinates and orchestrates multiple CodeGuardian analyzers for comprehensive code analysis, managing execution order, result integration, and performance optimization
    key_capabilities:
      - Analyzer Coordination Guidance
      - Result Integration Planning
      - Priority Management Strategy
      - Performance Optimization Guidance
      - Configuration Management Analysis
      - Cross-Analyzer Correlation Design
  - name: beginner-developer-agent
    description: Use this agent when a user needs assistance with basic coding tasks, explanations of simple concepts, or writing straightforward code snippets that align with the project's existing codebase patterns and standards, especially for those new to development or the specific project. This agent is ideal for proactive guidance on beginner-friendly tasks without overwhelming complexity.
    key_capabilities:
      - Clear explanations
      - Code examples
      - Proactive guidance
      - Pattern alignment
      - Learning support
  - name: benchmark-agent
    description: Manages performance benchmarks in the CodeGuardian project, including creating, running, analyzing, and optimizing performance tests
    key_capabilities:
      - Benchmark creation and design
      - Benchmark execution and data collection
      - Performance analysis and insights
      - Optimization recommendations
      - Benchmark maintenance and updates
      - CI/CD integration for performance monitoring
  - name: build-ci-optimizer
    description: Optimizes build processes, CI/CD pipelines, and deployment for CodeGuardian
    key_capabilities:
      - Build process optimization
      - CI/CD pipeline enhancement
      - Performance monitoring and improvement
      - Resource utilization analysis
      - Automated testing integration
      - Deployment strategy optimization
  - name: cache-intelligence-agent
    description: Manages src/cache.rs for intelligent caching, optimizing performance and memory usage
    key_capabilities:
      - Cache Optimization
      - Invalidation Management
      - Memory Management
      - Data Persistence
      - Performance Monitoring
      - Cache Warming
  - name: clean-code-developer
    description: Ensures code quality and maintainability through clean code practices and refactoring
    key_capabilities:
      - Code quality assessment
      - Refactoring recommendations
      - Best practices implementation
      - Code readability improvement
      - Technical debt reduction
      - Clean architecture guidance
  - name: code-analysis-agent
    description: Performs comprehensive code analysis for quality, security, and performance issues
    key_capabilities:
      - Static code analysis
      - Security vulnerability detection
      - Performance bottleneck identification
      - Code quality metrics
      - Automated code review
      - Issue prioritization
  - name: code-consolidator
    description: Consolidates and organizes code files, modules, and components for better structure and maintainability
    key_capabilities:
      - Code organization and restructuring
      - Module consolidation
      - Dependency management
      - Code duplication elimination
      - Architecture improvement
      - Documentation updates
  - name: code-quality-reviewer
    description: Reviews code for quality standards, best practices, and maintainability
    key_capabilities:
      - Code quality assessment
      - Best practices validation
      - Maintainability analysis
      - Code review automation
      - Quality metrics generation
      - Improvement recommendations
  - name: code-research
    description: Conducts research on code patterns, technologies, and best practices for CodeGuardian development
    key_capabilities:
      - Technology research and evaluation
      - Code pattern analysis
      - Best practices identification
      - Innovation exploration
      - Knowledge base development
      - Research documentation
  - name: codebase-doc-updater
    description: Updates and maintains codebase documentation, ensuring accuracy and completeness
    key_capabilities:
      - Documentation generation
      - API documentation updates
      - Code comment maintenance
      - README and guide updates
      - Documentation quality assurance
      - Knowledge sharing
  - name: codeguardian-main
    description: Main orchestrator for CodeGuardian operations, managing overall system coordination and workflow
    key_capabilities:
      - System orchestration
      - Workflow management
      - Resource allocation
      - Process coordination
      - System monitoring
      - Error handling
  - name: configuration-agent
    description: Manages and optimizes CodeGuardian configuration settings for optimal performance and functionality
    key_capabilities:
      - Configuration management
      - Settings optimization
      - Configuration validation
      - Performance tuning
      - Environment setup
      - Configuration documentation
  - name: configuration-validator
    description: Validates CodeGuardian configuration files and settings for correctness and compatibility
    key_capabilities:
      - Configuration validation
      - Syntax checking
      - Compatibility verification
      - Error detection
      - Configuration testing
      - Validation reporting
  - name: debug-findings-analyst
    description: Analyzes debug findings and error reports to identify root causes and provide solutions
    key_capabilities:
      - Error analysis
      - Root cause identification
      - Debug report generation
      - Solution recommendations
      - Issue tracking
      - Debugging guidance
  - name: dependency-agent
    description: Manages project dependencies, ensuring security, compatibility, and optimal versions
    key_capabilities:
      - Dependency analysis
      - Security vulnerability scanning
      - Version management
      - Compatibility checking
      - Update recommendations
      - Dependency optimization
  - name: documentation-specialist
    description: Specializes in creating and maintaining comprehensive documentation for CodeGuardian
    key_capabilities:
      - Technical writing
      - Documentation architecture
      - User guide creation
      - API documentation
      - Knowledge base management
      - Documentation standards
  - name: false-positive-validator
    description: Validates and filters false positive findings from security and code analysis tools
    key_capabilities:
      - False positive identification
      - Finding validation
      - Risk assessment
      - Alert filtering
      - Accuracy improvement
      - Validation reporting
  - name: git
    description: Manages Git operations and version control for CodeGuardian development
    key_capabilities:
      - Git repository management
      - Version control operations
      - Branch management
      - Commit handling
      - Merge conflict resolution
      - Git workflow optimization
  - name: github-discussions-manager
    description: Manages GitHub discussions, facilitating community engagement and knowledge sharing
    key_capabilities:
      - Discussion moderation
      - Community engagement
      - Knowledge sharing
      - Discussion organization
      - Response management
      - Engagement analytics
  - name: github-docs-specialist
    description: Specializes in GitHub documentation, including READMEs, wikis, and project documentation
    key_capabilities:
      - GitHub documentation management
      - README optimization
      - Wiki maintenance
      - Project documentation
      - Contribution guidelines
      - Documentation best practices
  - name: github-grep-searcher
    description: Performs advanced searches across GitHub repositories using grep-like functionality
    key_capabilities:
      - Code Pattern Discovery
      - Language-Specific Searches
      - Repository and Path Filtering
      - Regex vs Literal Guidance
      - Multi-Criteria Queries
      - Best Practices Education
  - name: github-issue-manager
    description: Manages GitHub issues, including creation, tracking, and resolution
    key_capabilities:
      - Issue tracking
      - Bug report management
      - Feature request handling
      - Issue prioritization
      - Resolution tracking
      - Issue analytics
  - name: github-label-manager
    description: Manages GitHub labels for issues and pull requests, ensuring consistent categorization
    key_capabilities:
      - Label creation and management
      - Categorization standards
      - Label consistency
      - Issue organization
      - Workflow optimization
      - Label analytics
  - name: github-pr-manager
    description: Manages GitHub pull requests, including review, approval, and merging processes
    key_capabilities:
      - Pull request management
      - Code review coordination
      - Merge conflict resolution
      - Approval workflows
      - Branch management
      - PR analytics
  - name: github-projects-manager
    description: Manages GitHub Projects for task tracking and project management
    key_capabilities:
      - Project board management
      - Task tracking
      - Workflow automation
      - Progress monitoring
      - Team coordination
      - Project analytics
  - name: github-push-monitor
    description: Monitors GitHub repository activities and performs automated actions after git push operations
    key_capabilities:
      - Repository monitoring
      - Workflow status checking
      - Deployment verification
      - Event tracking
      - Automated actions
      - Status reporting
  - name: github-wiki-editor
    description: Creates, reviews, and updates GitHub Wiki documentation following best practices
    key_capabilities:
      - Wiki page creation
      - Documentation review
      - Content organization
      - Formatting standards
      - Accessibility compliance
      - Cross-referencing
  - name: github-workflow-manager
    description: Manages GitHub Actions workflows and CI/CD processes
    key_capabilities:
      - Workflow creation and management
      - CI/CD pipeline setup
      - Automation implementation
      - Workflow optimization
      - Performance monitoring
      - Error handling
  - name: github-workflow-optimizer
    description: Optimizes GitHub Actions workflows for performance, security, and cost efficiency
    key_capabilities:
      - Workflow performance optimization
      - Resource utilization improvement
      - Reliability enhancement
      - Cost optimization
      - Monitoring and alerting
      - Best practices implementation
  - name: junior-developer
    description: Assists with coding tasks in Rust for CodeGuardian, ensuring adherence to best practices, clean code, and security standards
    key_capabilities:
      - Code Implementation
      - Bug Fixes and Debugging
      - Learning and Improvement
      - Quality Assurance
      - Collaboration
  - name: ml-pipeline-manager
    description: Manages ML pipelines in CodeGuardian's src/ml/ module, including RUV-FANN neural network training, feature extraction, and model optimization
    key_capabilities:
      - Pipeline Orchestration
      - Model Management
      - Data Pipeline
      - Performance Monitoring
      - Feature Engineering
      - A/B Testing
  - name: ml-training-specialist
    description: Manages ML training, data preparation, and model optimization for CodeGuardian
    key_capabilities:
      - ML Model Management
      - Data Pipeline Management
      - Model Optimization
  - name: opencode-command-documenter
    description: Specialized agent for documenting OpenCode commands and generating comprehensive command documentation
    key_capabilities:
      - Analyze command-line interfaces and generate structured documentation
      - Create usage examples, parameter descriptions, and option explanations
      - Maintain consistency across command documentation
      - Generate help text and man page content
      - Validate command syntax and provide usage guidance
      - Update documentation when commands are modified
      - Detect the tool associated with a given command (e.g., Git, GitHub CLI, CodeGuardian, OpenCode)
      - Verify command syntax and options against official documentation for the detected tool
      - Support multi-tool command documentation and cross-referencing
      - Handle tool-specific documentation formats and standards
  - name: orchestrator
    description: Enhanced Orchestrator that provides guidance for workflow orchestration and task coordination in CodeGuardian. Analyzes complex multi-step tasks and provides recommendations for agent coordination. For parallel execution, recommends using the swarm-orchestrator agent for actual parallel processing, load balancing, and result aggregation.
    key_capabilities:
      - Task Complexity Assessment
      - Agent Selection Guidance
      - Workflow Design
      - Dependency Mapping
      - Resource Planning
      - Parallel Processing Strategy
  - name: performance-optimizer
    description: Optimizes CodeGuardian performance, memory usage, and resource efficiency
    key_capabilities:
      - Performance analysis
      - Bottleneck identification
      - Optimization implementation
      - Resource management
      - Monitoring setup
      - Performance reporting
  - name: release-agent
    description: Manages CodeGuardian release processes, including versioning, changelog generation, release notes, and deployment automation
    key_capabilities:
      - Release planning
      - Version management
      - Deployment coordination
      - Release automation
      - Quality assurance
      - Release documentation
  - name: security-auditor
    description: Conducts security audits and identifies vulnerabilities in CodeGuardian
    key_capabilities:
      - Security vulnerability detection
      - Code review for security issues
      - Risk assessment
      - Security recommendations
      - Compliance checking
      - Security monitoring
  - name: streaming-processor
    description: Optimizes CodeGuardian's streaming analysis capabilities for real-time data processing and performance tuning
    key_capabilities:
      - Stream Optimization
      - Performance Tuning
      - Memory Management
      - Concurrency Handling
      - Error Recovery
      - Real-time Processing
      - Performance Monitoring
  - name: swarm-orchestrator
    description: Dynamic coordinator that provides strategic analysis and recommendations for managing agent swarms and parallel processing in the CodeGuardian ecosystem
    key_capabilities:
      - Dynamic Swarm Analysis
      - Intelligent Agent Recommendations
      - Parallel Execution Strategy
      - Result Synthesis Planning
      - Performance Optimization Guidance
      - Conflict Resolution Strategies
  - name: swarm-persona-architect
    description: Designs, refines, or generates specialized persona prompts for AI agents within a code analysis swarm, ensuring they align with project-specific standards and enhance collaborative code review processes
    key_capabilities:
      - Persona prompt generation
      - Swarm integration design
      - Agent specialization
      - Prompt optimization
      - Collaborative enhancement
      - Standards alignment
  - name: task-coordinator
    description: Manages and orchestrates complex multi-step tasks across the CodeGuardian project
    key_capabilities:
      - Workflow Orchestration
      - Task Sequencing
      - Progress Tracking
      - Resource Allocation
      - Quality Assurance
      - Integration Management
      - Error Recovery
  - name: testing-engineer
    description: Manages testing, generates tests, and ensures code quality for CodeGuardian
    key_capabilities:
      - Test Generation & Management
      - Test Coverage Analysis
      - Testing Infrastructure
  - name: websearch
    description: Performs web searches to retrieve information from the internet for research and verification
    key_capabilities:
      - Information retrieval
      - Query optimization
      - Data synthesis
      - Source verification
      - Result summarization